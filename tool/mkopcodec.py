#!/usr/bin/env python3
"""
Python replacement for mkopcodec.tcl

This Python script scans the opcodes.h file (which is itself generated by
another Python script) and uses the information gleaned to create the
opcodes.c source file.

Opcodes.c contains strings which are the symbolic names for the various
opcodes used by the VDBE.  These strings are used when disassembling a
VDBE program during tracing or as a result of the EXPLAIN keyword.

Usage:
  python3 mkopcodec.py opcodes.h > opcodes.c
"""

import sys
import re


def parse_opcodes_h(opcodes_h_path):
    """Parse opcodes.h file to extract opcode names and synopses"""
    label = {}
    synopsis = {}
    max_opcode = 0

    with open(opcodes_h_path, 'r', encoding='utf-8') as f:
        for line in f:
            # Match #define OP_* lines
            define_match = re.match(r'^#define\s+(OP_\w+)\s+(\d+)', line)
            if define_match:
                opcode_name = define_match.group(1)
                opcode_num = int(define_match.group(2))

                # Extract the name without OP_ prefix
                name = opcode_name[3:]  # Remove "OP_" prefix
                label[opcode_num] = name

                if opcode_num > max_opcode:
                    max_opcode = opcode_num

                # Extract synopsis from comment
                synopsis_match = re.search(r'synopsis:\s+(.*?)\s*\*/', line)
                if synopsis_match:
                    synopsis[opcode_num] = synopsis_match.group(1).strip()
                else:
                    synopsis[opcode_num] = ""

    return label, synopsis, max_opcode


def generate_opcodes_c(label, synopsis, max_opcode):
    """Generate the opcodes.c file content"""
    print("/* Automatically generated.  Do not edit */")
    print("/* See the tool/mkopcodec.py script for details. */")
    print("#if !defined(SQLITE_OMIT_EXPLAIN) \\")
    print(" || defined(VDBE_PROFILE) \\")
    print(" || defined(SQLITE_DEBUG)")
    print("#if defined(SQLITE_ENABLE_EXPLAIN_COMMENTS) || defined(SQLITE_DEBUG)")
    print("# define OpHelp(X) \"\\0\" X")
    print("#else")
    print("# define OpHelp(X)")
    print("#endif")
    print("const char *sqlite3OpcodeName(int i){")
    print("  static const char *const azName[] = {")

    for i in range(max_opcode + 1):
        opcode_name = label.get(i, f"NotUsed_{i}")
        opcode_synopsis = synopsis.get(i, "")
        print(f"    /* {i:3d} */ \"{opcode_name:<18}\" OpHelp(\"{opcode_synopsis}\"),")

    print("  };")
    print("  return azName[i];")
    print("}")
    print("#endif")


def main():
    if len(sys.argv) != 2:
        print("Usage: python3 mkopcodec.py opcodes.h > opcodes.c", file=sys.stderr)
        sys.exit(1)

    opcodes_h_path = sys.argv[1]

    try:
        label, synopsis, max_opcode = parse_opcodes_h(opcodes_h_path)
        generate_opcodes_c(label, synopsis, max_opcode)
    except FileNotFoundError:
        print(f"Error: {opcodes_h_path} not found", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error processing {opcodes_h_path}: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()